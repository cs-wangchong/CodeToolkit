digraph CFG {
  // graph-vertices
  v1  [label="2:  void populateFromZip(final File map, final Map<String, URI> availableGames, final Set<String> availableMapFolderOrZipNames, final Set<String> mapNamePropertyList)"];
  v2  [label="4:  try"];
  v3  [label="5:  final FileInputStream fis = new FileInputStream(map)"];
  v4  [label="6:  try"];
  v5  [label="7:  final ZipInputStream zis = new ZipInputStream(fis)"];
  v6  [label="8:  try"];
  v7  [label="9:  ZipEntry entry = zis.getNextEntry()"];
  v8  [label="10:  while (entry != null)"];
  v9  [label="end-while:10"];
  v10  [label="11:  if (entry.getName().startsWith('games/') && entry.getName().toLowerCase().endsWith('.xml'))"];
  v11  [label="12:  final URLClassLoader loader = new URLClassLoader(new URL[] {map.toURI().toURL()})"];
  v12  [label="end-if:11"];
  v13  [label="27:  zis.closeEntry()"];
  v14  [label="28:  entry = zis.getNextEntry()"];
  v15  [label="13:  final URL url = loader.getResource(entry.getName())"];
  v16  [label="15:  ClassLoaderUtil.closeLoader(loader)"];
  v17  [label="16:  try"];
  v18  [label="17:  final boolean added = addToAvailableGames(new URI(url.toString().replace(' ', '%20')), availableGames, mapNamePropertyList)"];
  v19  [label="19:  if (added && map.getName().length() > 4)"];
  v20  [label="20:  availableMapFolderOrZipNames .add(map.getName().substring(0, map.getName().length() - ZIP_EXTENSION.length()))"];
  v21  [label="end-if:19"];
  v22  [label="end-try:16"];
  v23  [label="23:  catch (URISyntaxException e)"];
  v24  [label="end-catch:16"];
  v25  [label="end-try:8"];
  v26  [label="30:  finally"];
  v27  [label="31:  zis.close()"];
  v28  [label="end-finally:8"];
  v29  [label="end-try:6"];
  v30  [label="33:  finally"];
  v31  [label="34:  fis.close()"];
  v32  [label="end-finally:6"];
  v33  [label="end-try:4"];
  v34  [label="36:  catch (IOException ioe)"];
  v35  [label="37:  ioe.printStackTrace()"];
  v36  [label="end-catch:4"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v11  [label="True"];
  v10 -> v12  [label="False"];
  v12 -> v13;
  v13 -> v14;
  v14 -> v9;
  v11 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v21 -> v23;
  v23 -> v24;
  v24 -> v22;
  v22 -> v12;
  v20 -> v21;
  v9 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v32 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v33;
  // end-of-graph
}
