digraph CFG {
  // graph-vertices
  v1  [label="2:  void outputArgumentsToFile(String outputFilename, List<String> args)"];
  v2  [label="3:  if (outputFilename != null)"];
  v3  [label="4:  String errorMessage = null"];
  v4  [label="end-if:3"];
  v5  [label="6:  try"];
  v6  [label="7:  PrintWriter writer = (outputFilename.equals('-') ? new PrintWriter(System.out) : new PrintWriter(outputFilename, 'UTF-8'))"];
  v7  [label="11:  int i = 0"];
  v8  [label="11:  for (i < args.size())"];
  v9  [label="end-for:11"];
  v10  [label="12:  String arg = args.get(i)"];
  v11  [label="20:  if (arg.startsWith('@'))"];
  v12  [label="22:  String inputFilename = arg.substring(1)"];
  v13  [label="32:  writer.print(arg)"];
  v14  [label="33:  writer.print(' ')"];
  v15  [label="end-if:20"];
  v16  [label="11:  i++"];
  v17  [label="24:  BufferedReader br = new BufferedReader(new FileReader(inputFilename))"];
  v18  [label="25:  String line"];
  v19  [label="26:  while ((line = br.readLine()) != null)"];
  v20  [label="end-while:26"];
  v21  [label="27:  writer.print(line)"];
  v22  [label="28:  writer.print(' ')"];
  v23  [label="30:  br.close()"];
  v24  [label="36:  writer.close()"];
  v25  [label="end-try:6"];
  v26  [label="37:  catch (IOException e)"];
  v27  [label="38:  errorMessage = e.toString()"];
  v28  [label="end-catch:6"];
  v29  [label="41:  if (errorMessage != null)"];
  v30  [label="42:  System.err.println( 'Failed to output command-line arguments to file ' + outputFilename + ' due to exception: ' + errorMessage)"];
  v31  [label="end-if:41"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v3 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v8;
  v12 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="False"];
  v19 -> v21  [label="True"];
  v21 -> v22;
  v22 -> v19;
  v20 -> v23;
  v23 -> v15;
  v9 -> v24;
  v24 -> v25;
  v24 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v25;
  v25 -> v29;
  v29 -> v30  [label="True"];
  v29 -> v31  [label="False"];
  v31 -> v4;
  v30 -> v31;
  // end-of-graph
}
